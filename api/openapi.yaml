openapi: "3.0.0"
info:
  version: 1.4.1
  title: Factorio Item Browser - Portal API
  contact:
    name: BluePsyduck
    email: bluepsyduck@gmx.com
  description: The API used by the portal frontend to receive any data from the backend.

tags:
  - name: Init
    description: Requests for initialization.
  - name: Item
    description: Requests related to item details.
  - name: Recipe
    description: Requests related to recipe details.
  - name: Search
    description: Requests related with searching for items, recipes etc.
  - name: Settings
    description: Requests realted to the setting handling.
  - name: Sidebar
    description: Requests related to the sidebar of the browser.
  - name: Style
    description: Requests related to additional styles provided by the server.
  - name: Tooltip
    description: Requests related to providing tooltip data.

paths:
  /init:
    post:
      summary: Initializes the session.
      operationId: init
      tags:
        - Init
      parameters:
        - name: combination-id
          in: header
          description: The combination id to use. If omitted, the last used combination will be used.
          required: false
          schema:
            type: string
            example: b6d9080c-0ce1-4c33-a628-62682bfa20f3
      responses:
        200:
          description: The data of the initialization.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InitData"

  /{type}/{name}/ingredients:
    get:
      summary: Returns the recipes where the requested item is an ingredient of.
      operationId: item.ingredients
      tags:
        - Item
      parameters:
        - $ref: "#/components/parameters/header-combination-id"
        - $ref: "#/components/parameters/type"
        - $ref: "#/components/parameters/name"
        - $ref: "#/components/parameters/indexOfFirstResult"
        - $ref: "#/components/parameters/numberOfResults"
      responses:
        200:
          description: The list of matched recipes.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemRecipesData"
  /{type}/{name}/products:
    get:
      summary: Returns the recipes where the requested item is a product of.
      operationId: item.products
      tags:
        - Item
      parameters:
        - $ref: "#/components/parameters/header-combination-id"
        - $ref: "#/components/parameters/type"
        - $ref: "#/components/parameters/name"
        - $ref: "#/components/parameters/indexOfFirstResult"
        - $ref: "#/components/parameters/numberOfResults"
      responses:
        200:
          description: The list of matched recipes.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemRecipesData"
  /items:
    get:
      summary: Returns a list of all items available in the current setting.
      operationId: items
      tags:
        - Item
      parameters:
        - $ref: "#/components/parameters/header-combination-id"
        - $ref: "#/components/parameters/indexOfFirstResult"
        - $ref: "#/components/parameters/numberOfResults"
      responses:
        200:
          description: The list of items.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemListData"

  /random:
    get:
      summary: Returns random items.
      operationId: random
      tags:
        - Item
      parameters:
        - $ref: "#/components/parameters/header-combination-id"
        - $ref: "#/components/parameters/numberOfResults"
      responses:
        200:
          description: The random items.
          content:
            application/json:
              schema:
                type: array
                description: The random items.
                items:
                  $ref: "#/components/schemas/EntityData"

  /recipe/{name}:
    get:
      summary: Returns the detauls of the recipe.
      operationId: recipe.details
      tags:
        - Recipe
      parameters:
        - $ref: "#/components/parameters/header-combination-id"
        - $ref: "#/components/parameters/name"
      responses:
        200:
          description: The recipe details.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecipeDetailsData"

  /recipe/{name}/machines:
    get:
      summary: Returns a list of machines able to craft the specified recipe.
      operationId: recipe.machines
      tags:
        - Recipe
      parameters:
        - $ref: "#/components/parameters/header-combination-id"
        - $ref: "#/components/parameters/name"
        - $ref: "#/components/parameters/indexOfFirstResult"
        - $ref: "#/components/parameters/numberOfResults"
      responses:
        200:
          description: The list of machines.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecipeMachinesData"

  /search:
    get:
      summary: Searches for entities matching a query.
      operationId: search
      tags:
        - Search
      parameters:
        - $ref: "#/components/parameters/header-combination-id"
        - $ref: "#/components/parameters/query"
        - $ref: "#/components/parameters/indexOfFirstResult"
        - $ref: "#/components/parameters/numberOfResults"
      responses:
        200:
          description: The list of entities matching the query.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchResultData"

  /settings:
    get:
      summary: Returns a list of available settings of the current user.
      operationId: settings.list
      tags:
        - Settings
      responses:
        200:
          description: The list of available settings.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SettingsListData"

    put:
      summary: Creates a new setting with the specified options for the current user.
      operationId: settings.create
      tags:
        - Settings
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SettingCreateData"
      responses:
        204:
          description: The setting has been successfully created. Start over with a /session/init request.

  /settings/{combination-id}:
    get:
      summary: Returns the details of the specified setting.
      operationId: settings.details
      tags:
        - Settings
      parameters:
        - $ref: "#/components/parameters/combination-id"
      responses:
        200:
          description: The details of the requested setting.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SettingDetailsData"

    put:
      summary: Saves changes to the specified setting.
      operationId: settings.save
      tags:
        - Settings
      parameters:
        - $ref: "#/components/parameters/combination-id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SettingOptionsData"
      responses:
        204:
          description: The changes were successfully processed on the server.

    delete:
      summary: Deletes the setting. The setting must not be the current active setting.
      operationId: settings.delete
      tags:
        - Settings
      parameters:
        - $ref: "#/components/parameters/combination-id"
      responses:
        204:
          description: The setting have been successfully deleted.

  /settings/status:
    get:
      summary: Returns the status of the current setting.
      operationId: settings.status
      tags:
        - Settings
      responses:
        200:
          description: The status of the current setting.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SettingStatusData"
    post:
      summary: Returns the status of the setting build by the specified mods.
      operationId: settings.status.mods
      tags:
        - Settings
      requestBody:
        content:
          application/json:
            schema:
              type: array
              description: The mod names used in the setting.
              items:
                type: string
              example:
                - base
                - FNEI
      responses:
        200:
          description: The status of the current setting.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SettingStatusData"

  /sidebar/entities:
    put:
      summary: Sends changes to the sidebar to the server.
      operationId: sidebar.entities
      tags:
        - Sidebar
      parameters:
        - $ref: "#/components/parameters/header-combination-id"
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/SidebarEntityData"
      responses:
        204:
          description: The chnages were successfully processed on the server.

  /style/icons:
    post:
      summary: Returns the icons as stylesheet.
      operationId: style.icons
      tags:
        - Style
      parameters:
        - $ref: "#/components/parameters/header-combination-id"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NamesByTypes"
        required: true
      responses:
        200:
          description: The stylesheet for the requested icons.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IconsStyleData"

  /tooltip/{type}/{name}:
    get:
      summary: Returns the tooltip data to show for the specified item or fluid.
      operationId: tooltip.item
      tags:
        - Tooltip
      parameters:
        - $ref: "#/components/parameters/header-combination-id"
        - $ref: "#/components/parameters/type"
        - $ref: "#/components/parameters/name"
      responses:
        200:
          description: The data for the tooltip.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityData"

  /tooltip/recipe/{name}:
    get:
      summary: Returns the tooltip data to show for the specified recipe.
      operationId: tooltip.recipe
      tags:
        - Tooltip
      parameters:
        - $ref: "#/components/parameters/header-combination-id"
        - $ref: "#/components/parameters/name"
      responses:
        200:
          description: The data for the tooltip.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EntityData"

components:
  parameters:
    header-combination-id:
      name: combination-id
      in: header
      description: The combination id to use for the request.
      required: true
      schema:
        type: string
        example: b6d9080c-0ce1-4c33-a628-62682bfa20f3

    type:
      name: type
      in: path
      description: The type of the item or fluid.
      required: true
      schema:
        type: string
        enum:
          - item
          - fluid
        example: item
    name:
      name: name
      in: path
      description: The name of the item, fluid or recipe.
      required: true
      schema:
        type: string
        example: copper-cable
    combination-id:
      name: combination-id
      in: path
      description: The combination id of the setting.
      required: true
      schema:
        type: string
        example: 84ad3867-d5fe-495d-af32-a4709ab3c2b7

    indexOfFirstResult:
      name: indexOfFirstResult
      in: query
      description: The index of the first result to return, starting at 0.
      required: true
      schema:
        type: integer
        example: "0"
    numberOfResults:
      name: numberOfResults
      in: query
      description: The number of results to return.
      required: true
      schema:
        type: integer
        example: 24
    query:
      name: query
      in: query
      description: The query to use for the search.
      required: true
      schema:
        type: string
        example: iron plate

  schemas:
    EntityData:
      type: object
      description: The data of an entity.
      properties:
        type:
          type: string
          description: The type of the entity.
          example: item
        name:
          type: string
          description: The internal name of the entity.
          example: electronic-circuit
        label:
          type: string
          description: The translated label of the entity.
          example: Elektronischer Schaltkreis
        recipes:
          type: array
          items:
            $ref: "#/components/schemas/RecipeData"
        numberOfRecipes:
          type: integer
          description: The total number of recipes available for the entity.
          example: 42

    IconsStyleData:
      type: object
      description: The data containing the generated style.
      properties:
        processedEntities:
          $ref: "#/components/schemas/NamesByTypes"
        style:
          type: string
          description: The style representing the icons of the requested entities.
          example: ".example-style { background: red; }"

    InitData:
      type: object
      description: The data to initialize the session.
      properties:
        setting:
          $ref: "#/components/schemas/SettingMetaData"
        lastUsedSetting:
          $ref: "#/components/schemas/SettingMetaData"
        locale:
          type: string
          description: The locale to use for the page.
          example: de
        sidebarEntities:
          type: array
          description: The sidebar entities of the session.
          items:
            $ref: "#/components/schemas/SidebarEntityData"
        scriptVersion:
          type: string
          description: The current version of the scripts.
          example: 1650be3c220267a96f3d
      required:
        - setting
        - locale
        - sidebarEntities
        - scriptVersion

    ItemMetaData:
      type: object
      description: The meta data of an item.
      properties:
        type:
          type: string
          description: The type of the item.
          example: item
        name:
          type: string
          description: The internal name of the item.
          example: electronic-circuit

    ItemListData:
      type: object
      description: The data containing a list of items.
      properties:
        results:
          type: array
          description: The items of the list.
          items:
            $ref: "#/components/schemas/ItemMetaData"
        numberOfResults:
          type: integer
          description: The total number of items available.
          example: 42

    ItemRecipesData:
      type: object
      description: The data containing recipes with a certain item.
      properties:
        type:
          type: string
          enum:
            - item
            - fluid
          description: The type of the requested item or fluid.
          example: item
        name:
          type: string
          description: The name of the requested item or fluid.
          example: copper-cable
        label:
          type: string
          description: The translated label of the requested item or fluid.
          example: Kupferkabel
        description:
          type: string
          description: The translated description of the requested item or fluid.
          example: Kann mit Linke Maustaste zum Verbinden und Trennen von Strommasten und Stromschaltern verwendet werden.
        results:
          type: array
          description: The recipes related to the requested item.
          items:
            $ref: "#/components/schemas/EntityData"
        numberOfResults:
          type: integer
          description: The total number of recipes available for the item.
          example: 42

    MachineData:
      type: object
      description: The data of a machine.
      properties:
        name:
          type: string
          description: The name of the machine.
          example: assembling-machine-1
        label:
          type: string
          description: The translated label of the machine.
          example: Montagemaschine 1
        craftingSpeed:
          type: number
          description: The crafting speed of the machine.
          example: 13.37
        numberOfItems:
          type: number
          description: The number of items supported by the machine. 255 for unlimited.
          example: 42
        numberOfFluids:
          type: number
          description: The number of fluids supported by the machine.
          example: 21
        numberOfModules:
          type: number
          description: The number of module slots the machine has.
          example: 69
        energyUsage:
          type: number
          description: The energy usage of the machine.
          example: 1337
        energyUsageUnit:
          type: string
          enum:
            - W
            - kW
            - MW
            - GW
            - TW
            - PW
            - EW
            - ZW
            - YW
          description: The unit of the energyUsage value.
          example: kW

    ModData:
      type: object
      description: The data of a mod.
      properties:
        name:
          type: string
          description: The name of the mod.
          example: base
        label:
          type: string
          description: The translated label of the mod.
          example: Base mod
        author:
          type: string
          description: The author of the mod.
          example: Factorio team
        version:
          type: string
          description: The version of the mod.
          example: 1.2.3

    NamesByTypes:
      type: object
      description: The names of entities grouped by their type.
      additionalProperties:
        type: array
        items:
          type: string
      example:
        item: ["iron-plate", "steel-plate"]
        fluid: ["heavy-oil"]

    RecipeData:
      type: object
      description: The data of a single recipe.
      properties:
        craftingTime:
          type: number
          description: The crafting time of the recipe in seconds.
          example: 13.37
        ingredients:
          type: array
          items:
            $ref: "#/components/schemas/RecipeItemData"
          description: The ingredients of the recipe.
        products:
          type: array
          items:
            $ref: "#/components/schemas/RecipeItemData"
          description: The products of the recipe.
        isExpensive:
          type: boolean
          description: Whether the recipe is used in the expensive mode.
          example: false

    RecipeDetailsData:
      type: object
      description: The data containing the details of a recipe.
      properties:
        name:
          type: string
          description: The name of the recipe.
          example: copper-cable
        label:
          type: string
          description: The translated label of the recipe.
        description:
          type: string
          description: The translated description of the recipe.
        recipe:
          $ref: "#/components/schemas/RecipeData"
        expensiveRecipe:
          $ref: "#/components/schemas/RecipeData"

    RecipeItemData:
      type: object
      description: The data of an item being part of a recipe.
      properties:
        type:
          type: string
          enum:
            - item
            - recipe
          description: The type of the item.
          example: item
        name:
          type: string
          description: The internal name of the item.
          example: iron-plate
        label:
          type: string
          description: The translated label of the item.
          example: Eisenplatte
        amount:
          type: number
          description: The amount of the item in the recipe.
          example: 42

    RecipeMachinesData:
      type: object
      description: The data containing the machines for a recipe.
      properties:
        results:
          type: array
          description: The machines able to craft the recipe.
          items:
            $ref: "#/components/schemas/MachineData"
        numberOfResults:
          type: integer
          description: The total number of machines.
          example: 42

    SearchResultData:
      type: object
      description: The data containing results of the search.
      properties:
        query:
          type: string
          description: The query used for the search.
          example: iron
        results:
          type: array
          items:
            $ref: "#/components/schemas/EntityData"
          description: The actual search results.
        numberOfResults:
          type: integer
          description: The total number of search results.
          example: 42

    SettingCreateData:
      allOf:
        - $ref: "#/components/schemas/SettingOptionsData"
        - type: object
          properties:
            modNames:
              type: array
              description: The mod names to use in the setting.
              items:
                type: string
              example:
                - base
                - FNEI

    SettingDetailsData:
      allOf:
        - $ref: "#/components/schemas/SettingMetaData"
        - $ref: "#/components/schemas/SettingOptionsData"
        - type: object
          description: The detailed data of a setting of mods.
          properties:
            mods:
              type: array
              description: The mods used by the setting.
              items:
                $ref: "#/components/schemas/ModData"
            modIconsStyle:
              $ref: "#/components/schemas/IconsStyleData"

    SettingMetaData:
      type: object
      description: The meta data of a setting of mods.
      properties:
        combinationId:
          type: string
          description: The id of the combination assigned to the setting.
          example: 84ad3867-d5fe-495d-af32-a4709ab3c2b7
        name:
          type: string
          description: The name of the setting.
          example: Vanilla
        status:
          type: string
          description: The status of the setting.
          enum:
            - available
            - errored
            - pending
            - unknown
          example: available
        isTemporary:
          type: boolean
          description: Whether the setting is temporary.
          example: false

    SettingOptionsData:
      type: object
      description: The options of the setting.
      properties:
        name:
          type: string
          description: The name of the setting.
          example: Vanilla
        locale:
          type: string
          description: The locale of the setting.
          example: en
        recipeMode:
          type: string
          enum:
            - hybrid
            - normal
            - expensive
          description: The recipe mode of the setting.
          example: hybrid

    SettingStatusData:
      type: object
      description: The current status of the setting.
      properties:
        status:
          type: string
          description: The export status of the combination.
          enum:
            - pending
            - available
            - errored
          example: available
        exportTime:
          type: string
          format: date-time
          description: The timestamp when the data was exported from Factorio.
          example: "2038-01-19T03:14:07.000Z"
        existingSetting:
          $ref: "#/components/schemas/SettingDetailsData"
      required:
        - status

    SettingsListData:
      type: object
      description: The data of the list of available settings.
      properties:
        settings:
          type: array
          description: The list of available settings.
          items:
            $ref: "#/components/schemas/SettingMetaData"
        currentSetting:
          $ref: "#/components/schemas/SettingDetailsData"

    SidebarEntityData:
      type: object
      description: The data representing an entity of the sidebar.
      properties:
        type:
          type: string
          enum:
            - item
            - fluid
            - recipe
          description: The type of the entity.
          example: item
        name:
          type: string
          description: The name of the entity.
          example: electronic-circuit
        label:
          type: string
          description: The translated label of the entity.
          example: Elektronischer Schaltkreis
        pinnedPosition:
          type: integer
          description: The position of the entity in the pinned list. 0 if not pinned.
          example: 7
        lastViewTime:
          type: string
          format: date-time
          description: The timestamp when the entity was last viewed.
          example: "2038-01-19T03:14:07.000Z"
