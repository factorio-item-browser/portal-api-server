openapi: "3.0.0"
info:
  version: 1.0.0
  title: Factorio Item Browser - Portal API
  contact:
    name: BluePsyduck
    email: bluepsyduck@gmx.com
  description: The API used by the portal frontend to receive any data from the backend.

tags:
  - name: Search
    description: Requests related with searching for items, recipes etc.
  - name: Style
    description: Requests related to additional styles provided by the server.

paths:
  /search:
    get:
      summary: Searches for entities matching a query.
      operationId: search
      tags:
        - Search
      parameters:
        - $ref: "#/components/parameters/query"
        - $ref: "#/components/parameters/indexOfFirstResult"
        - $ref: "#/components/parameters/numberOfResults"
      responses:
        200:
          description: The list of entities matching the query.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SearchResultData"

  /style/icons:
    post:
      summary: Returns the icons as stylesheet.
      operationId: style.icons
      tags:
        - Style
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NamesByTypes"
        required: true
      responses:
        200:
          description: The stylesheet for the requested icons.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IconsStyleData"

components:
  parameters:
    indexOfFirstResult:
      name: indexOfFirstResult
      in: query
      description: The index of the first result to return, starting at 0.
      required: true
      schema:
        type: integer
        example: "0"
    numberOfResults:
      name: numberOfResults
      in: query
      description: The number of results to return.
      required: true
      schema:
        type: integer
        example: 24
    query:
      name: query
      in: query
      description: The query to use for the search.
      required: true
      schema:
        type: string
        example: iron plate

  schemas:
    EntityData:
      type: object
      properties:
        type:
          type: string
          description: The type of the entity.
          example: item
        name:
          type: string
          description: The internal name of the entity.
          example: electronic-circuit
        label:
          type: string
          description: The translated label of the entity.
          example: Elektronischer Schaltkreis
        recipes:
          type: array
          items:
            $ref: "#/components/schemas/RecipeData"
        numberOfRecipes:
          type: integer
          description: The total number of recipes available for the entity.
          example: 42

    IconsStyleData:
      type: object
      properties:
        processedEntities:
          $ref: "#/components/schemas/NamesByTypes"
        style:
          type: string
          description: The style representing the icons of the requested entities.
          example: ".example-style { background: red; }"

    NamesByTypes:
      type: object
      description: The names of entities grouped by their type.
      additionalProperties:
        type: array
        items:
          type: string
      example:
        item: ["iron-plate", "steel-plate"]
        fluid: ["heavy-oil"]

    RecipeData:
      type: object
      properties:
        craftingTime:
          type: number
          description: The crafting time of the recipe in seconds.
          example: 13.37
        ingredients:
          type: array
          items:
            $ref: "#/components/schemas/RecipeItemData"
          description: The ingredients of the recipe.
        products:
          type: array
          items:
            $ref: "#/components/schemas/RecipeItemData"
          description: The products of the recipe.
        isExpensive:
          type: boolean
          description: Whether the recipe is used in the expensive mode.
          example: false

    RecipeItemData:
      type: object
      properties:
        type:
          type: string
          enum:
            - item
            - recipe
          description: The type of the item.
          example: item
        name:
          type: string
          description: The internal name of the item.
          example: iron-plate
        label:
          type: string
          description: The translated label of the item.
          example: Eisenplatte
        amount:
          type: number
          description: The amount of the item in the recipe.
          example: 42

    SearchResultData:
      type: object
      properties:
        query:
          type: string
          description: The query used for the search.
          example: iron
        results:
          type: array
          items:
            $ref: "#/components/schemas/EntityData"
          description: The actual search results.
        numberOfResults:
          type: integer
          description: The total number of search results.
          example: 42

